// <auto-generated />
using System;
using BookStoreManage.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStoreManage.Migrations
{
    [DbContext(typeof(BookManageContext))]
    partial class BookManageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookStoreManage.Entity.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"), 1L, 1);

                    b.Property<string>("AccountAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AccountEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varbinary(1024)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varbinary(1024)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = 1,
                            AccountEmail = "dHRoYW5odHVuZzkyQGdtYWlsLmNvbQ==",
                            PasswordHash = new byte[] { 95, 236, 213, 190, 179, 205, 189, 66, 186, 120, 57, 234, 63, 229, 75, 163, 156, 142, 81, 227, 14, 71, 241, 176, 175, 152, 37, 171, 216, 22, 57, 140, 19, 0, 181, 221, 252, 36, 180, 101, 23, 160, 220, 221, 191, 79, 140, 85, 96, 244, 77, 37, 33, 99, 156, 66, 136, 253, 254, 38, 151, 184, 114, 82 },
                            PasswordSalt = new byte[] { 122, 50, 191, 80, 201, 18, 108, 124, 138, 50, 209, 60, 247, 1, 84, 51, 255, 30, 86, 23, 72, 231, 202, 162, 210, 209, 146, 189, 181, 10, 133, 155, 4, 135, 101, 193, 79, 100, 200, 44, 48, 85, 109, 104, 206, 60, 33, 21, 60, 178, 169, 228, 82, 219, 234, 35, 32, 207, 185, 150, 3, 27, 186, 62, 102, 23, 84, 19, 14, 241, 66, 218, 168, 34, 4, 4, 32, 101, 190, 221, 122, 149, 18, 184, 157, 5, 192, 133, 125, 55, 117, 133, 86, 255, 244, 151, 76, 106, 42, 204, 64, 201, 186, 130, 244, 205, 40, 70, 15, 95, 106, 78, 230, 57, 81, 197, 165, 102, 84, 120, 114, 115, 51, 147, 73, 254, 118, 19 },
                            RoleID = 2,
                            Status = true,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountID = 2,
                            AccountEmail = "dHVuZ3R0c2UxNDA5NjNAZnB0LmVkdS52bg==",
                            PasswordHash = new byte[] { 120, 133, 178, 245, 49, 115, 238, 253, 153, 195, 176, 148, 185, 194, 201, 255, 63, 206, 207, 131, 130, 90, 73, 17, 168, 245, 156, 28, 126, 139, 100, 158, 23, 70, 54, 151, 143, 51, 220, 193, 144, 21, 174, 61, 152, 123, 200, 251, 109, 176, 147, 195, 50, 46, 191, 239, 94, 13, 216, 145, 117, 133, 45, 108 },
                            PasswordSalt = new byte[] { 182, 109, 237, 58, 245, 211, 222, 208, 226, 59, 142, 68, 123, 109, 127, 39, 55, 133, 156, 109, 217, 40, 249, 64, 197, 200, 89, 104, 240, 255, 39, 127, 137, 136, 116, 181, 69, 207, 178, 143, 11, 220, 180, 111, 197, 5, 54, 25, 199, 213, 147, 219, 123, 194, 160, 177, 247, 14, 55, 219, 188, 158, 147, 126, 63, 84, 23, 175, 57, 174, 7, 24, 166, 126, 40, 160, 197, 66, 185, 249, 236, 192, 130, 151, 82, 181, 108, 187, 208, 218, 41, 103, 87, 28, 102, 206, 99, 217, 176, 54, 173, 125, 33, 1, 33, 252, 211, 33, 188, 80, 245, 64, 218, 247, 30, 65, 196, 146, 255, 19, 38, 71, 24, 115, 254, 152, 11, 116 },
                            RoleID = 2,
                            Status = true,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountID = 3,
                            AccountEmail = "aG9hbmduaHNlMTQwMTg0QGZwdC5lZHUudm4=",
                            PasswordHash = new byte[] { 77, 229, 43, 44, 174, 231, 162, 89, 122, 171, 12, 77, 79, 212, 120, 141, 138, 26, 72, 222, 126, 179, 34, 13, 74, 158, 180, 247, 245, 208, 183, 83, 239, 225, 232, 83, 71, 114, 253, 65, 170, 90, 89, 194, 43, 221, 9, 174, 56, 110, 177, 85, 216, 221, 226, 247, 243, 167, 252, 29, 77, 38, 132, 61 },
                            PasswordSalt = new byte[] { 32, 1, 8, 80, 235, 42, 62, 59, 152, 129, 221, 181, 58, 128, 142, 163, 108, 80, 6, 124, 150, 178, 76, 89, 38, 85, 147, 135, 101, 7, 29, 127, 17, 42, 95, 91, 82, 162, 173, 155, 177, 135, 48, 41, 151, 176, 124, 231, 21, 127, 242, 89, 21, 42, 199, 22, 25, 90, 187, 179, 4, 63, 221, 43, 158, 180, 209, 245, 250, 88, 233, 234, 206, 187, 49, 14, 226, 62, 41, 181, 81, 2, 244, 37, 235, 233, 202, 134, 186, 80, 167, 22, 214, 251, 57, 219, 144, 12, 147, 181, 229, 127, 136, 188, 226, 65, 155, 53, 194, 119, 72, 63, 101, 127, 66, 214, 190, 114, 83, 158, 68, 1, 62, 237, 146, 233, 23, 211 },
                            RoleID = 2,
                            Status = true,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountID = 4,
                            AccountEmail = "YWRtaW4=",
                            PasswordHash = new byte[] { 222, 42, 93, 17, 78, 7, 248, 88, 100, 191, 229, 190, 164, 30, 224, 134, 39, 37, 25, 41, 140, 232, 202, 56, 84, 102, 191, 27, 78, 106, 245, 10, 217, 52, 19, 208, 173, 95, 74, 148, 215, 238, 88, 28, 166, 35, 50, 251, 251, 11, 124, 26, 116, 107, 222, 0, 157, 128, 30, 128, 185, 28, 125, 37 },
                            PasswordSalt = new byte[] { 116, 20, 237, 236, 99, 223, 89, 138, 209, 185, 211, 199, 83, 194, 52, 203, 202, 159, 12, 85, 114, 224, 16, 211, 23, 86, 26, 242, 124, 1, 99, 227, 167, 157, 70, 49, 249, 197, 126, 66, 92, 87, 77, 82, 246, 154, 35, 105, 61, 185, 212, 198, 167, 69, 132, 151, 176, 165, 201, 214, 105, 24, 225, 220, 195, 192, 251, 168, 126, 235, 13, 172, 207, 213, 27, 33, 45, 195, 83, 194, 0, 0, 146, 194, 3, 168, 233, 176, 13, 145, 195, 116, 129, 123, 64, 125, 239, 58, 10, 254, 15, 242, 86, 143, 161, 113, 24, 110, 61, 46, 221, 31, 117, 201, 7, 147, 163, 203, 100, 57, 105, 239, 47, 216, 21, 239, 233, 85 },
                            RoleID = 1,
                            Status = true,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountID = 5,
                            AccountEmail = "c3RhZmY=",
                            PasswordHash = new byte[] { 10, 109, 232, 42, 57, 82, 174, 39, 143, 130, 135, 94, 25, 167, 100, 154, 194, 134, 60, 77, 114, 181, 82, 175, 65, 135, 145, 33, 96, 116, 182, 95, 100, 243, 232, 162, 243, 108, 63, 137, 222, 244, 19, 223, 185, 88, 241, 5, 31, 243, 127, 62, 178, 233, 228, 10, 63, 61, 145, 122, 181, 233, 185, 217 },
                            PasswordSalt = new byte[] { 153, 75, 221, 167, 97, 90, 164, 127, 27, 241, 142, 189, 161, 214, 168, 33, 135, 73, 70, 109, 128, 82, 92, 173, 74, 47, 8, 255, 93, 200, 73, 13, 35, 7, 148, 77, 24, 227, 63, 79, 234, 75, 209, 233, 13, 107, 107, 101, 160, 86, 217, 94, 91, 145, 8, 194, 37, 62, 245, 162, 14, 195, 200, 110, 250, 74, 6, 218, 6, 235, 42, 169, 137, 196, 40, 163, 85, 113, 84, 99, 23, 213, 121, 246, 84, 208, 30, 234, 30, 58, 204, 0, 121, 188, 224, 58, 64, 25, 107, 235, 28, 127, 208, 64, 54, 130, 125, 157, 212, 68, 137, 2, 64, 255, 60, 69, 171, 22, 87, 226, 4, 58, 186, 201, 208, 94, 53, 118 },
                            RoleID = 3,
                            Status = true,
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookStoreManage.Entity.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"), 1L, 1);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"), 1L, 1);

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateOfPublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PublisherID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StripeID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BookName")
                        .IsUnique();

                    b.HasIndex("FieldID");

                    b.HasIndex("PublisherID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Field", b =>
                {
                    b.Property<int>("FieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldID"), 1L, 1);

                    b.Property<string>("FieldDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FieldID");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfOrder")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OrderStatus")
                        .HasMaxLength(20)
                        .HasColumnType("bit");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("AccountID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BookStoreManage.Entity.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"), 1L, 1);

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("BookID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherID"), 1L, 1);

                    b.Property<string>("FieldAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Customer"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "Staff"
                        });
                });

            modelBuilder.Entity("BookStoreManage.Entity.Account", b =>
                {
                    b.HasOne("BookStoreManage.Entity.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Book", b =>
                {
                    b.HasOne("BookStoreManage.Entity.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreManage.Entity.Field", "Field")
                        .WithMany("Books")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreManage.Entity.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Field");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Order", b =>
                {
                    b.HasOne("BookStoreManage.Entity.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BookStoreManage.Entity.OrderDetail", b =>
                {
                    b.HasOne("BookStoreManage.Entity.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreManage.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Account", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Book", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Field", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreManage.Entity.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
